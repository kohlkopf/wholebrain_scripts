library(wholebrain)
R.Version()
for list.files("U:\qiq\2019-01-07_MO_PEA_IAMM_MIX\Processed\PEA")
list.files("U:\qiq\2019-01-07_MO_PEA_IAMM_MIX\Processed\PEA")
list.files("U:/qiq\2019-01-07_MO_PEA_IAMM_MIX\Processed\PEA")
list.files("U:/qiq/2019-01-07_MO_PEA_IAMM_MIX/Processed/PEA")
list.files("U:/qiq/2019-01-07_MO_PEA_IAMM_MIX/Processed/PEA/datasets/")
i=0
for(item in list.files("U:/qiq/2019-01-07_MO_PEA_IAMM_MIX/Processed/PEA/datasets/"){
i=0
for(item in list.files("U:/qiq/2019-01-07_MO_PEA_IAMM_MIX/Processed/PEA/datasets/")){
i<-i+1;
i;
}
i=0
for(item in list.files("U:/qiq/2019-01-07_MO_PEA_IAMM_MIX/Processed/PEA/datasets/")){
load(item);
item;
i<-i+1;
i;
}
list.files("U:/qiq/2019-01-07_MO_PEA_IAMM_MIX/Processed/PEA/datasets/")
i=0
for(item in list.files("U:/qiq/2019-01-07_MO_PEA_IAMM_MIX/Processed/PEA/datasets/", full.names = TRUE)){
load(item);
item;
i<-i+1;
i;
}
i=0
for(item in list.files("U:/qiq/2019-01-07_MO_PEA_IAMM_MIX/Processed/PEA/datasets/", full.names = TRUE)){
load(item);
item;
i<-i+1;
print(i);
}
c("datasets_", i)
paste0("datasets_", i)
i=0
for(item in list.files("U:/qiq/2019-01-07_MO_PEA_IAMM_MIX/Processed/PEA/datasets/", full.names = TRUE)){
load(item);
paste0("datasets_", i) <- datasets;
i<-i+1;
print(i);
}
i=0
for(item in list.files("U:/qiq/2019-01-07_MO_PEA_IAMM_MIX/Processed/PEA/datasets/", full.names = TRUE)){
load(item);
assign(paste0("datasets_", i), datasets);
i<-i+1;
print(i);
}
item
ls()
print(item);
ls()
for(item in grep("^datasets"", ls(), value=TRUE){
for(item in grep("^datasets"", ls(), value=TRUE){
grep("^datasets"", ls(), value=TRUE))
grep("^datasets"", ls(), value=TRUE))
grep("^datasets"", ls(), value=TRUE)
grep("^datasets"", ls(), value=TRUE)
grep("^datasets", ls(), value=TRUE)
grep("^datasets_", ls(), value=TRUE)
i=0;
i=0;
for(dataset in grep("^datasets_", ls(), value=TRUE)){
if(i=0){datasets_accum <- dataset;}
i=0;
for(dataset in grep("^datasets_", ls(), value=TRUE)){
if(i=0){datasets_accum <- dataset;};
i=0;
for(dataset in grep("^datasets_", ls(), value=TRUE)){
if(i==0){datasets_accum <- dataset;};
merge(datasets_accum, dataset[!(dataset$image %in% dataset_accum$image,]);
dataset[!(dataset$image %in% dataset_accum$image,]
i=0;
for(dataset in grep("^datasets_", ls(), value=TRUE)){
if(i==0){datasets_accum <- dataset;};
merge(datasets_accum, dataset[!(dataset$image %in% dataset_accum$image),]);
}
dataset
datasets_accum
dataset$image
dataset
mget(grep("^datasets_", ls(), value=TRUE)))
mget(grep("^datasets_", ls(), value=TRUE))
datasets_9
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
merge(datasets_accum, dataset[!(dataset$image %in% dataset_accum$image),]);
}
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
merge(datasets_accum, dataset[!(dataset$image %in% dataset_accum$image),]);
}
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
merge(datasets_accum, dataset[!(dataset$image %in% dataset_accum$image),]);
}
i=0;
dataset
datasets_accum <- dataset
datasets_accum
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
merge(datasets_accum, dataset[!(dataset$image %in% dataset_accum$image),]);
}
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
merge(datasets_accum, dataset[!(dataset$image %in% datasets_accum$image),]);
}
datasets_accum
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
datasets_accum <- merge(datasets_accum, dataset[!(dataset$image %in% datasets_accum$image),]);
}
merge(datasets_accum, datasets_9[!(datasets_9$image %in% datasets_accum$image),])
if(i==0){datasets_accum <- dataset;};
if(i==0){datasets_accum <- dataset;}
merge(datasets_accum, datasets_9[!(datasets_9$image %in% datasets_accum$image),])
datasets_9$image %in% datasets_accum$image
table(datasets_9$image %in% datasets_accum$image)
table(!(datasets_9$image %in% datasets_accum$image))
datasets_9[!(datasets_9$image %in% datasets_accum$image),]
rbind(datasets_accum, datasets_9[!(datasets_9$image %in% datasets_accum$image),])
if(i==0){datasets_accum <- dataset;}
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
datasets_accum <- rbind(datasets_accum, dataset[!(dataset$image %in% datasets_accum$image),]);
}
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
datasets_accum <- rbind(datasets_accum, dataset[!(dataset$image %in% datasets_accum$image),]);
}
datasets_accum <- rbind(datasets_accum, dataset[!(dataset$image %in% datasets_accum$image),])
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
datasets_accum <- rbind(datasets_accum, dataset[!(dataset$image %in% datasets_accum$image),]);
print(i);
}
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
datasets_accum <- rbind(datasets_accum, dataset[!(dataset$image %in% datasets_accum$image),]);
i++;
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
datasets_accum <- rbind(datasets_accum, dataset[!(dataset$image %in% datasets_accum$image),]);
i <- i+1;
print(i);
}
nrow(table(datasets_accum$image))
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
datasets_accum <- rbind(datasets_accum, dataset[!(dataset$image %in% datasets_accum$image),]);
#i <- i+1;
}
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
datasets_accum <- rbind(datasets_accum, dataset[!(dataset$image %in% datasets_accum$image),]);
}
rm(datasets_accum)
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
datasets_accum <- rbind(datasets_accum, dataset[!(dataset$image %in% datasets_accum$image),]);
}
rm(datasets_accum)
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
datasets_accum <- rbind(datasets_accum, dataset[!(dataset$image %in% datasets_accum$image),]);
}
i=0;
for(dataset in mget(grep("^datasets_", ls(), value=TRUE))){
if(i==0){datasets_accum <- dataset;};
datasets_accum <- rbind(datasets_accum, dataset[!(dataset$image %in% datasets_accum$image),]);
i=i+1;
}
i
paste0(i, " datasets were merged.")
nrow(table(datasets_accum$image))
glassbrain(datasets_accum)
library(wholebrain)
glassbrain(datasets_accum)
paste0(i, " datasets were merged.")
grep("^datasets_[1-9]+", ls(), value=TRUE))
grep("^datasets_[1-9]+", ls(), value=TRUE)
full_datasets %>%
dplyr::group_by(animal) %>%
dplyr::summarize(count=n())
joined %>%
gather(variable, value, -Var1)
#join, missing values result in NA
joined <- left_join(as.tbl(as.data.frame((pea_iamm_density))), as.tbl(as.data.frame((iamm_density))), by="Var1")
library(dplyr)
library(tidyr)
library(magrittr)
library(ggplot2)
library(wholebrain)
load("iamm_datasets_accum.Robj")
library(dplyr)
library(tidyr)
library(magrittr)
library(ggplot2)
library(wholebrain)
wd <- "D:/2019-03-22_MO_PEA_IAMM_MIX/PEA/"
setwd(wd)
library(wholebrain)
library(dplyr)
library(naturalsort)
library(stringr)
# get listing
images <- get.images(paste0(wd, "/images"))
#set spacing between periods in millimeters
smp<-0.06
inspected <- c(31, 50, 74, 88, 137)
smp.coord <- c(3.045, 1.545, 0.020, -0.955, -4.08)
coord <- map.to.atlas(image.number=inspected,
coordinate=smp.coord,
sampling.period=smp,
number.of.sections=length(images)
)
#plot the coords to ensure nothing is way off
plot(coord[0:155])
dev.off()
load(file= "../saved_filter/initial_filters_qiang.RData")
brain_seg$filter$resize <- 0.08
brain_seg$filter$Max <- 10000
#brain_seg$filter$Max<-5000
dev.off()
file_list <- naturalsort(list.files(paste0(wd, "specific_reg"), full.names = TRUE))
df_list <- lapply(file_list, function(x) mget(load(x)))
str(registration)
suffixes <- NULL
for(registration in file_list){
load(registration)
suffix <- as.numeric(as.character(str_match(registration, "([0-9]{3})_")[2]))
assign(paste0("regi_", suffix), regi)
suffixes <- c(suffixes, as.numeric(suffix))
}
inspect.registration(regi, seg, soma = FALSE, forward.warps = TRUE, batch.mode = TRUE)
inspect.registration(regi, soma = FALSE, forward.warps = TRUE, batch.mode = TRUE)
inspect.registration(regi_137, soma = FALSE, forward.warps = TRUE, batch.mode = TRUE)
inspect.registration(regi_137, soma = FALSE, batch.mode = TRUE)
inspect.registration(regi_137, soma = FALSE, batch.mode = FALSE)
inspect.registration(regi_37, soma = FALSE, batch.mode = FALSE)
inspect.registration(regi_37, seg, soma = FALSE, batch.mode = FALSE)
suffixes
suffix=37
seg <- segment(images[suffix], display=FALSE, filter = neuron_seg$filter, channel=2)
inspect.registration(regi_37, seg, soma = FALSE, batch.mode = FALSE)
regi_37
registration(images[37], coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi)
registration(images[37], coord37i], filter = brain_seg$filter, display=TRUE, channel=2, correspondance=regi)
registration(images[37], coord[37], filter = brain_seg$filter, display=TRUE, channel=2, correspondance=regi)
load(file= "../saved_filter/initial_filters_qiang.RData")
brain_seg$filter$resize <- 0.08
brain_seg$filter$Max <- 10000
#brain_seg$filter$Max<-5000
registration(images[37], coord[37], filter = brain_seg$filter, display=TRUE, channel=2, correspondance=regi)
brain_seg$filter
registration(images[37], coord[37], filter = brain_seg$filter, display=TRUE, channel=2, correspondance=regi)
registration(images[37], coord[37], filter = brain_seg$filter, display=TRUE, channel=2, correspondance=regi_37)
images[37]
coord[37]
registration(images[37], coord[37], filter = brain_seg$filter, display=TRUE, channel=1, correspondance=regi_37)
registration(images[37], coord[37], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi_37)
registration(images[70], coord[70], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi_70)
dev.off()
for(i in 137){
input.points=""
regi <- registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, batch.mode = TRUE)
input.points <- readline(prompt=paste0("Bregma: ", coord[i], "\nInput a vector of points to remove, enter if OK: "))
if(!(input.points == "")){regi <- remove.corrpoints(regi, eval(parse(text=input.points)))}
regi <- add.corrpoints(regi)
#re-register with added/removed points
regi <- registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi)
dev
dev.off()
#create directory, save the registration info
if(!dir.exists(file.path(wd, "/specific_reg/"))){dir.create(file.path(wd, "/specific_reg/"), showWarnings = FALSE)}
save(file=paste0(wd, "/specific_reg/", tools::file_path_sans_ext(basename(images[i])), "_registration_info.RData"), regi)
if(!dir.exists(file.path(wd, "/registrations_images/"))){dir.create(file.path(wd, "/registration_images/"), showWarnings = FALSE)}
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi)
dev.copy(pdf, paste0(wd, '/registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
dev.off()
}
dev.copy
dev.copy(pdf, paste0(wd, '/registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi)
dev.copy(pdf, paste0(wd, '/registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
dev.off()
if(!dir.exists(file.path(wd, "/registrations_images/"))){dir.create(file.path(wd, "/registration_images/"), showWarnings = FALSE)}
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, verbose=FALSE)
dev.copy(pdf, paste0(wd, '/registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
dev.off()
dev.off()
for(i in 137){
input.points=""
regi <- registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, batch.mode = TRUE, verbose=FALSE)
input.points <- readline(prompt=paste0("Bregma: ", coord[i], "\nInput a vector of points to remove, enter if OK: "))
if(!(input.points == "")){regi <- remove.corrpoints(regi, eval(parse(text=input.points)))}
regi <- add.corrpoints(regi)
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, verbose=FALSE)
dev.off()
#re-register with added/removed points
regi <- registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, verbose=FALSE)
dev
dev.off()
#create directory, save the registration info
if(!dir.exists(file.path(wd, "/specific_reg/"))){dir.create(file.path(wd, "/specific_reg/"), showWarnings = FALSE)}
save(file=paste0(wd, "/specific_reg/", tools::file_path_sans_ext(basename(images[i])), "_registration_info.RData"), regi)
if(!dir.exists(file.path(wd, "/registrations_images/"))){dir.create(file.path(wd, "/registration_images/"), showWarnings = FALSE)}
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, verbose=FALSE)
dev.copy(pdf, paste0(wd, '/registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
dev.off()
}
dev.off()
dev.off()
if(!dir.exists(file.path(wd, "/registration_images/"))){dir.create(file.path(wd, "/registration_images/"), showWarnings = FALSE)}
for(i in 137){
input.points=""
regi <- registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, batch.mode = TRUE, output.folder='/registration_images')
input.points <- readline(prompt=paste0("Bregma: ", coord[i], "\nInput a vector of points to remove, enter if OK: "))
if(!(input.points == "")){regi <- remove.corrpoints(regi, eval(parse(text=input.points)))}
regi <- add.corrpoints(regi)
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='/registration_images')
dev.off()
#re-register with added/removed points
regi <- registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='/registration_images')
dev.off()
#create directory, save the registration info
if(!dir.exists(file.path(wd, "/specific_reg/"))){dir.create(file.path(wd, "/specific_reg/"), showWarnings = FALSE)}
save(file=paste0(wd, "/specific_reg/", tools::file_path_sans_ext(basename(images[i])), "_registration_info.RData"), regi)
if(!dir.exists(file.path(wd, "/registrations_images/"))){dir.create(file.path(wd, "/registration_images/"), showWarnings = FALSE)}
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='/registration_images')
dev.copy(pdf, paste0(wd, '/registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
dev.off()
}
if(!dir.exists(file.path(wd, "registration_images/"))){dir.create(file.path(wd, "registration_images/"), showWarnings = FALSE)}
dev.off()
if(!dir.exists(file.path(wd, "registration_images/"))){dir.create(file.path(wd, "registration_images/"), showWarnings = FALSE)}
for(i in 137){
input.points=""
regi <- registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, batch.mode = TRUE, output.folder='registration_images')
input.points <- readline(prompt=paste0("Bregma: ", coord[i], "\nInput a vector of points to remove, enter if OK: "))
if(!(input.points == "")){regi <- remove.corrpoints(regi, eval(parse(text=input.points)))}
regi <- add.corrpoints(regi)
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='registration_images')
dev.off()
#re-register with added/removed points
regi <- registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='registration_images')
dev.off()
#create directory, save the registration info
if(!dir.exists(file.path(wd, "/specific_reg/"))){dir.create(file.path(wd, "/specific_reg/"), showWarnings = FALSE)}
save(file=paste0(wd, "/specific_reg/", tools::file_path_sans_ext(basename(images[i])), "_registration_info.RData"), regi)
if(!dir.exists(file.path(wd, "/registrations_images/"))){dir.create(file.path(wd, "registration_images/"), showWarnings = FALSE)}
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='registration_images')
dev.copy(pdf, paste0(wd, 'registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
dev.off()
}
dev.off()
dev.off()
dev.off()
if(!dir.exists(file.path(wd, "registration_output/"))){dir.create(file.path(wd, "registration_output/"), showWarnings = FALSE)}
for(i in 137){
input.points=""
regi <- registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, batch.mode = TRUE, output.folder='registration_output')
input.points <- readline(prompt=paste0("Bregma: ", coord[i], "\nInput a vector of points to remove, enter if OK: "))
if(!(input.points == "")){regi <- remove.corrpoints(regi, eval(parse(text=input.points)))}
regi <- add.corrpoints(regi)
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='registration_output')
dev.off()
#re-register with added/removed points
regi <- registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='registration_output')
dev.off()
#create directory, save the registration info
if(!dir.exists(file.path(wd, "/specific_reg/"))){dir.create(file.path(wd, "/specific_reg/"), showWarnings = FALSE)}
save(file=paste0(wd, "/specific_reg/", tools::file_path_sans_ext(basename(images[i])), "_registration_info.RData"), regi)
if(!dir.exists(file.path(wd, "/registration_images/"))){dir.create(file.path(wd, "registration_images/"), showWarnings = FALSE)}
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='registration_output')
dev.copy(pdf, paste0(wd, 'registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
dev.off()
}
if(!dir.exists(file.path(wd, "/registration_images/"))){dir.create(file.path(wd, "registration_images/"), showWarnings = FALSE)}
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='registration_output')
dev.copy(pdf, paste0(wd, 'registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
dev.off()
dev.off()
#creat directory, save the warped atlas overaying the image
if(!dir.exists(file.path(wd, "/registration_images/"))){dir.create(file.path(wd, "registration_images/"), showWarnings = FALSE)}
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='registration_output')
dev.copy(pdf, paste0(wd, 'registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
dev.off();dev.off()
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=FALSE, channel=0, correspondance=regi, output.folder='registration_output')
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=FALSE, channel=0, correspondance=regi, output.folder='registration_output', verbose=FALSE)
if(!dir.exists(file.path(wd, "/registration_images/"))){dir.create(file.path(wd, "registration_images/"), showWarnings = FALSE)}
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=FALSE, channel=0, correspondance=regi, output.folder='registration_output', verbose=)
dev.copy(pdf, paste0(wd, 'registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
dev.off();dev.off()
if(!dir.exists(file.path(wd, "/registration_images/"))){dir.create(file.path(wd, "registration_images/"), showWarnings = FALSE)}
registration2(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='registration_output', verbose=)
dev.copy(pdf, paste0(wd, 'registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
dev.off();dev.off()
if(!dir.exists(file.path(wd, "/registration_images/"))){dir.create(file.path(wd, "registration_images/"), showWarnings = FALSE)}
registration2(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='registration_output', verbose=)
dev.copy(pdf, paste0(wd, 'registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
dev.off();dev.off()
if(!dir.exists(file.path(wd, "/registration_images/"))){dir.create(file.path(wd, "registration_images/"), showWarnings = FALSE)}
registration2(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='registration_output', verbose=)
dev.copy(pdf, paste0(wd, 'registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
dev.off();dev.off()
registration2(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='registration_output', verbose=)
if(!dir.exists(file.path(wd, "/registration_images/"))){dir.create(file.path(wd, "registration_images/"), showWarnings = FALSE)}
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='registration_output', verbose=)
dev.copy(pdf, paste0(wd, 'registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
dev.off();dev.off()
#creat directory, save the warped atlas overaying the image
if(!dir.exists(file.path(wd, "/registration_images/"))){dir.create(file.path(wd, "registration_images/"), showWarnings = FALSE)}
registration(images[i], coordinate=coord[i], filter = brain_seg$filter, display=TRUE, channel=0, correspondance=regi, output.folder='registration_output')
dev.copy(pdf, paste0(wd, 'registration_images/',tools::file_path_sans_ext(basename(images[i])), '.pdf'), width=18, height=8)
dev.off();dev.off()
wd <- "D:/2019-03-22_MO_PEA_IAMM_MIX/PEA_IAMM//"
setwd(wd)
library(wholebrain)
library(dplyr)
library(naturalsort)
library(stringr)
# get listing
images <- get.images(paste0(wd, "/images"))
#set spacing between periods in millimeters
smp<-0.06
inspected <- c(31, 50, 74, 88, 137)
inspected <- c(31, 50, 74, 88, 137)
imshow(images[31])
inspected <- c(31, 50, 74, 88, 137)
# get listing
images <- get.images(paste0(wd, "/images"))
inspected <- c(31, 50, 74, 88)
imshow(images[31])
setwd("D:/kk2252/version_control/wholebrain_scripts")
